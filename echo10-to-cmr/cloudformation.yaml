AWSTemplateFormatVersion: 2010-09-09

Parameters:

  Name:
    Type: String

  ActivityArn:
    Type: String

  AuxBucket:
    Type: String

  CachedCmrTokenKey:
    Type: String
    Default: cached-cmr-auth-token

  CmrTokenLambda:
    Type: String

  CmrGranuleUrl:
    Type: String

Outputs:

  LambdaArn:
    Value: !GetAtt Lambda.Arn

Resources:

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Name}-dlq"
      MessageRetentionPeriod: 1209600

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Name}"
      RetentionInDays: 30

  Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref Name
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: lambda.amazonaws.com
          Effect: Allow
      Policies:
      - PolicyName: policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: !GetAtt LogGroup.Arn
          - Effect: Allow
            Action: sqs:SendMessage
            Resource: !GetAtt DeadLetterQueue.Arn
          - Effect: Allow
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${AuxBucket}/*"
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${CmrTokenLambda}"
          - Effect: Allow
            Action:
            - states:GetActivityTask
            - states:SendTaskSuccess
            - states:SendTaskFailure
            Resource: !Ref ActivityArn

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref Name
      Code: src/
      DeadLetterConfig:
        TargetArn: !GetAtt DeadLetterQueue.Arn
      Environment:
        Variables:
          CONFIG: !Sub |-
            {
              "max_task_time_in_millis": 65000,
              "sfn_connect_timeout": 65,
              "activity": {
                "arn": "${ActivityArn}",
                "worker_name": "${Name}"
              },
              "cmr": {
                "granule_url": "${CmrGranuleUrl}",
                "cached_token": {
                  "bucket": "${AuxBucket}",
                  "key": "${CachedCmrTokenKey}"
                },
                "cmr_token_lambda": "${CmrTokenLambda}"
              }
            }
      Handler: daemon.lambda_handler
      MemorySize: 128
      Role: !GetAtt Role.Arn
      Runtime: python3.7
      Timeout: 900

  Schedule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${Name}"
      ScheduleExpression: "rate(1 minute)"
      State: ENABLED
      Targets:
      - Arn: !GetAtt Lambda.Arn
        Id: !Ref Name

  EventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Lambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt Schedule.Arn
