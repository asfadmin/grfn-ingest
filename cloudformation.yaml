AWSTemplateFormatVersion: "2010-09-09"

Parameters:

  Maturity:
    Description: "Maturity level alias used when invoking lambda functions"
    Type: "String"
    Default: "TEST"
    AllowedValues:
      - "TEST"
      - "PROD"

  StepFunctionRoleArn:
    Description: "IAM execution role to attach to step function"
    Type: "String"
    Default: "arn:aws:iam::406893895021:role/service-role/StatesExecutionRole-us-east-1"

Resources:

  Activity:
    Type: "AWS::StepFunctions::Activity"
    Properties:
      Name: !Ref "AWS::StackName"

  StepFunction:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: !Ref "AWS::StackName"
      RoleArn: !Ref "StepFunctionRoleArn"
      DefinitionString: !Sub |-
        {
          "Comment": "A step function to control lambdas for GRFN Ingest",
          "StartAt": "Verify",
          "States": {
            "Verify": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:us-east-1:406893895021:function:verify:${Maturity}",
              "Next": "Ingest",
              "ResultPath": "$.VerifyResults",
              "Retry": [
                {
                  "ErrorEquals": ["INVALID_MESSAGE", "INVALID_METADATA"],
                  "MaxAttempts": 0
                },
                {
                  "ErrorEquals": ["States.ALL"]
                }
              ],
              "Catch": [{
                "ErrorEquals": ["States.ALL"],
                "Next": "Notify",
                "ResultPath": "$.Error"
              }]
            },
            "Ingest": {
              "Type": "Task",
              "Resource": "${Activity}",
              "TimeoutSeconds": 901,
              "ResultPath": "$.IngestResults",
              "Next": "Parallel",
              "Retry": [{
                "ErrorEquals": ["States.ALL"]
              }],
              "Catch": [{
                "ErrorEquals": ["States.ALL"],
                "Next": "Notify",
                "ResultPath": "$.Error"
              }]
            },
            "Parallel": {
              "Type": "Parallel",
              "InputPath": "$.IngestResults",
              "ResultPath": "$.ParallelResults",
              "Next": "Notify",
              "Catch": [{
                "ErrorEquals": ["States.ALL"],
                "Next": "Notify",
                "ResultPath": "$.Error"
              }],
              "Branches": [
                {
                  "StartAt": "Echo_10_Construction_All",
                  "States": {
                    "Echo_10_Construction_All": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:us-east-1:406893895021:function:echo10-construction:${Maturity}",
                      "InputPath": "$.all",
                      "ResultPath": "$.ConstructionAllResults",
                      "Next": "Echo_10_to_CMR_All",
                      "Retry": [{
                        "ErrorEquals": ["States.ALL"]
                      }]
                    },
                    "Echo_10_to_CMR_All": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:us-east-1:406893895021:function:echo10-to-cmr:${Maturity}",
                      "InputPath": "$.ConstructionAllResults",
                      "ResultPath": "$.CmrAllResults",
                      "Retry": [{
                        "ErrorEquals": ["States.ALL"],
                        "MaxAttempts": 6,
                        "BackoffRate": 5
                      }],
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "Echo_10_Construction_UnwGeo",
                  "States": {
                    "Echo_10_Construction_UnwGeo": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:us-east-1:406893895021:function:echo10-construction:${Maturity}",
                      "InputPath": "$.unw_geo",
                      "ResultPath": "$.ConstructionUnwGeoResults",
                      "Next": "Echo_10_to_CMR_UnwGeo",
                      "Retry": [{
                        "ErrorEquals": ["States.ALL"]
                      }]
                    },
                    "Echo_10_to_CMR_UnwGeo": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:us-east-1:406893895021:function:echo10-to-cmr:${Maturity}",
                      "InputPath": "$.ConstructionUnwGeoResults",
                      "ResultPath": "$.CmrUnwGeoResults",
                      "Retry": [{
                        "ErrorEquals": ["States.ALL"],
                        "MaxAttempts": 6,
                        "BackoffRate": 5
                      }],
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "Echo_10_Construction_FullRes",
                  "States": {
                    "Echo_10_Construction_FullRes": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:us-east-1:406893895021:function:echo10-construction:${Maturity}",
                      "InputPath": "$.full_res",
                      "ResultPath": "$.ConstructionFullResResults",
                      "Next": "Echo_10_to_CMR_FullRes",
                      "Retry": [{
                        "ErrorEquals": ["States.ALL"]
                      }]
                    },
                    "Echo_10_to_CMR_FullRes": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:us-east-1:406893895021:function:echo10-to-cmr:${Maturity}",
                      "InputPath": "$.ConstructionFullResResults",
                      "ResultPath": "$.CmrFullResResults",
                      "Retry": [{
                        "ErrorEquals": ["States.ALL"],
                        "MaxAttempts": 6,
                        "BackoffRate": 5
                      }],
                      "End": true
                    }
                  }
                }
              ]
            },
            "Notify": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:us-east-1:406893895021:function:notify:${Maturity}",
              "ResultPath": "$.NotifyResults",
              "Retry": [{
                "ErrorEquals": ["States.ALL"]
              }],
              "Next": "Check_Status"
            },
            "Check_Status": {
              "Type" : "Choice",
              "Choices": [{
                "Variable": "$.NotifyResults.Status",
                "StringEquals": "success",
                "Next": "Success"
              }],
              "Default": "Failure"
            },
            "Failure": {
              "Type": "Fail",
              "Error": "Ingest failed.",
              "Cause": "Ingest failed.  Inspect the 'Error' field of the Failure task's input for details."
            },
            "Success": {
              "Type": "Pass",
              "End": true
            }
          }
        }
