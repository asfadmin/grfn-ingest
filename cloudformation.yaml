AWSTemplateFormatVersion: 2010-09-09

Parameters:

  Maturity:
    Description: Maturity level alias used when invoking lambda functions
    Type: String
    Default: TEST
    AllowedValues:
      - $LATEST
      - TEST
      - PROD

  StepFunctionRoleArn:
    Description: IAM execution role to attach to step function
    Type: String
    Default: arn:aws:iam::406893895021:role/service-role/StatesExecutionRole-us-east-1

  OregonTopicArn:
    Description: ARN of ingest topic in us-west-2.  Can be removed when we fix JPL access.
    Type: String
    Default: arn:aws:sns:us-west-2:765666652335:grfn-archive-test

Resources:

  IngestActivity:
    Type: AWS::StepFunctions::Activity
    Properties:
      Name: !Join
      - '-'
      - - !Ref AWS::StackName
        - ingest

  CmrActivity:
    Type: AWS::StepFunctions::Activity
    Properties:
      Name: !Join
      - '-'
      - - !Ref AWS::StackName
        - cmr

  StepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Ref AWS::StackName
      RoleArn: !Ref StepFunctionRoleArn
      DefinitionString: !Sub |-
        {
          "Comment": "A step function to control lambdas for GRFN Ingest",
          "StartAt": "Verify",
          "States": {
            "Verify": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:us-east-1:406893895021:function:verify:${Maturity}",
              "Next": "Ingest",
              "ResultPath": "$.VerifyResults",
              "Retry": [
                {
                  "ErrorEquals": ["INVALID_MESSAGE", "INVALID_METADATA"],
                  "MaxAttempts": 0
                },
                {
                  "ErrorEquals": ["States.ALL"]
                }
              ],
              "Catch": [{
                "ErrorEquals": ["States.ALL"],
                "Next": "Notify",
                "ResultPath": "$.Error"
              }]
            },
            "Ingest": {
              "Type": "Task",
              "Resource": "${IngestActivity}",
              "TimeoutSeconds": 600,
              "ResultPath": "$.IngestResults",
              "Next": "Parallel",
              "Retry": [{
                "ErrorEquals": ["States.ALL"],
                "MaxAttempts": 5
              }],
              "Catch": [{
                "ErrorEquals": ["States.ALL"],
                "Next": "Notify",
                "ResultPath": "$.Error"
              }]
            },
            "Parallel": {
              "Type": "Parallel",
              "InputPath": "$.IngestResults",
              "ResultPath": "$.ParallelResults",
              "Next": "Notify",
              "Catch": [{
                "ErrorEquals": ["States.ALL"],
                "Next": "Notify",
                "ResultPath": "$.Error"
              }],
              "Branches": [
                {
                  "StartAt": "Echo_10_Construction_All",
                  "States": {
                    "Echo_10_Construction_All": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:us-east-1:406893895021:function:echo10-construction:${Maturity}",
                      "InputPath": "$.all",
                      "ResultPath": "$.ConstructionAllResults",
                      "Next": "Echo_10_to_CMR_All",
                      "Retry": [{
                        "ErrorEquals": ["States.ALL"]
                      }]
                    },
                    "Echo_10_to_CMR_All": {
                      "Type": "Task",
                      "Resource": "${CmrActivity}",
                      "TimeoutSeconds": 30,
                      "InputPath": "$.ConstructionAllResults",
                      "ResultPath": "$.CmrAllResults",
                      "Retry": [{
                        "ErrorEquals": ["States.ALL"],
                        "MaxAttempts": 6,
                        "BackoffRate": 5
                      }],
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "Echo_10_Construction_UnwGeo",
                  "States": {
                    "Echo_10_Construction_UnwGeo": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:us-east-1:406893895021:function:echo10-construction:${Maturity}",
                      "InputPath": "$.unw_geo",
                      "ResultPath": "$.ConstructionUnwGeoResults",
                      "Next": "Echo_10_to_CMR_UnwGeo",
                      "Retry": [{
                        "ErrorEquals": ["States.ALL"]
                      }]
                    },
                    "Echo_10_to_CMR_UnwGeo": {
                      "Type": "Task",
                      "Resource": "${CmrActivity}",
                      "TimeoutSeconds": 30,
                      "InputPath": "$.ConstructionUnwGeoResults",
                      "ResultPath": "$.CmrUnwGeoResults",
                      "Retry": [{
                        "ErrorEquals": ["States.ALL"],
                        "MaxAttempts": 6,
                        "BackoffRate": 5
                      }],
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "Echo_10_Construction_FullRes",
                  "States": {
                    "Echo_10_Construction_FullRes": {
                      "Type": "Task",
                      "Resource": "arn:aws:lambda:us-east-1:406893895021:function:echo10-construction:${Maturity}",
                      "InputPath": "$.full_res",
                      "ResultPath": "$.ConstructionFullResResults",
                      "Next": "Echo_10_to_CMR_FullRes",
                      "Retry": [{
                        "ErrorEquals": ["States.ALL"]
                      }]
                    },
                    "Echo_10_to_CMR_FullRes": {
                      "Type": "Task",
                      "Resource": "${CmrActivity}",
                      "TimeoutSeconds": 30,
                      "InputPath": "$.ConstructionFullResResults",
                      "ResultPath": "$.CmrFullResResults",
                      "Retry": [{
                        "ErrorEquals": ["States.ALL"],
                        "MaxAttempts": 6,
                        "BackoffRate": 5
                      }],
                      "End": true
                    }
                  }
                }
              ]
            },
            "Notify": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:us-east-1:406893895021:function:notify:${Maturity}",
              "ResultPath": "$.NotifyResults",
              "Retry": [{
                "ErrorEquals": ["States.ALL"]
              }],
              "Next": "Check_Status"
            },
            "Check_Status": {
              "Type" : "Choice",
              "Choices": [{
                "Variable": "$.NotifyResults.Status",
                "StringEquals": "success",
                "Next": "Success"
              }],
              "Default": "Failure"
            },
            "Failure": {
              "Type": "Fail",
              "Error": "Ingest failed.",
              "Cause": "Ingest failed.  Inspect the 'Error' field of the Failure task's input for details."
            },
            "Success": {
              "Type": "Pass",
              "End": true
            }
          }
        }

  ErrorTopic:
    Type: AWS::SNS::Topic

  Alarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Ingest failure alarm
      AlarmActions:
        - !Ref ErrorTopic
      Dimensions:
        - Name: StateMachineArn
          Value: !Ref StepFunction
      MetricName: ExecutionsFailed
      Namespace: AWS/States
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Statistic: Sum
      Threshold: 1
      Unit: Count
      TreatMissingData: notBreaching

  JobQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref AWS::StackName
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 10

  JobTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Ref AWS::StackName
      Subscription:
      - Protocol: sqs
        Endpoint: !GetAtt JobQueue.Arn

  JobQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument: !Sub |-
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": "*",
              "Resource": "${JobQueue.Arn}",
              "Action": "sqs:SendMessage",
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": "${JobTopic}"
                }
              }
            },
            {
              "Effect": "Allow",
              "Principal": "*",
              "Resource": "${JobQueue.Arn}",
              "Action": "sqs:SendMessage",
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": "${OregonTopicArn}"
                }
              }
            }
          ]
        }
      Queues:
      - !Ref JobQueue
