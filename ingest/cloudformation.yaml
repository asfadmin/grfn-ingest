AWSTemplateFormatVersion: 2010-09-09

Parameters:

  Name:
    Type: String

  PublicBucket:
    Type: String

  PrivateBucket:
    Type: String

  AuxBucket:
    Type: String

Outputs:

  LambdaArn:
    Value: !GetAtt Lambda.Arn

Resources:

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Name}"
      RetentionInDays: 30

  Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Name}-new"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: lambda.amazonaws.com
          Effect: Allow
      Policies:
      - PolicyName: policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: !GetAtt LogGroup.Arn
          - Effect: Allow
            Action: s3:GetObject
            Resource: arn:aws:s3:::*/*
          - Effect: Allow
            Action: s3:PutObject
            Resource:
            - !Sub "arn:aws:s3:::${PrivateBucket}/*"
            - !Sub "arn:aws:s3:::${PublicBucket}/*"
            - !Sub "arn:aws:s3:::${AuxBucket}/*"

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref Name
      Code: src/
      Environment:
        Variables:
          CONFIG: !Sub |-
            {
              "browse_bucket": "${PublicBucket}",
              "metadata_bucket": "${AuxBucket}",
              "product_bucket": "${PrivateBucket}",
              "transfer_config": {
                "multipart_threshold": 61644800,
                "multipart_chunksize": 61644800
              }
            }
      Handler: main.lambda_handler
      MemorySize: 128
      Role: !GetAtt Role.Arn
      Runtime: python3.8
      Timeout: 180
