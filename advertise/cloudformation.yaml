AWSTemplateFormatVersion: 2010-09-09

Parameters:

  Name:
    Type: String

  LogLevel:
    Type: String
    Default: INFO
    AllowedValues:
    - CRITICAL
    - ERROR
    - WARNING
    - INFO
    - DEBUG

  ActivityArn:
    Type: String

  CmrSearchUrl:
    Type: String

  CmrClientId:
    Type: String

Outputs:

  LambdaArn:
    Value: !GetAtt Lambda.Arn

  TopicArn:
    Value: !Ref Topic

Resources:

  Topic:
    Type: AWS::SNS::Topic
    Properties:
      Name: !Sub "${Name}-new-scene"

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Name}-dlq"
      MessageRetentionPeriod: 1209600

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Name}"
      RetentionInDays: 30

  Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref Name
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Action: sts:AssumeRole
          Principal:
            Service: lambda.amazonaws.com
          Effect: Allow
      Policies:
      - PolicyName: policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: !GetAtt LogGroup.Arn
          - Effect: Allow
            Action: sqs:SendMessage
            Resource: !GetAtt DeadLetterQueue.Arn
          - Effect: Allow
            Action: sns:SendMessage
            Resource: !Ref Topic
          - Effect: Allow
            Action:
            - states:GetActivityTask
            - states:SendTaskSuccess
            - states:SendTaskFailure
            Resource: !Ref ActivityArn

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref Name
      Code: src/
      DeadLetterConfig:
        TargetArn: !GetAtt DeadLetterQueue.Arn
      Environment:
        Variables:
          CONFIG: !Sub |-
            {
              "log_level": "${LogLevel}",
              "daemon": {
                "max_task_time_in_millis": 65000,
                "sfn_connect_timeout": 65,
                "activity": {
                  "arn": "${ActivityArn}",
                  "worker_name": "${Name}"
                },
                "cmr_client_id": "${CmrClientId}",
                "advertise": {
                  "granule_search_url": "${CmrGranuleSearchUrl}",
                  "topic_arn": "${Topic}"
                }
              }
            }
      Handler: daemon.lambda_handler
      MemorySize: 128
      Role: !GetAtt Role.Arn
      Runtime: python2.7
      Timeout: 300

  Schedule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${Name}"
      ScheduleExpression: "rate(1 minute)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt Lambda.Arn
          Id: !Ref Name

  EventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Lambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt Schedule.Arn
